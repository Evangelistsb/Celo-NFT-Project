{"version":3,"sources":["components/ui/Notifications.js","components/Cover.js","hooks/useBalance.js","hooks/useContract.js","hooks/useMinterContract.js","hooks/useSealsContract.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/wallet/Wallet.js","utils/minter.js","container/Factory/Factory.jsx","container/Navigation/Navigation.jsx","components/ui/Bid.js","components/ui/Card.js","components/ui/Loader.js","container/Home/Home.jsx","components/ui/List.js","container/Profile/Profile.jsx","App.js","reportWebVitals.js","index.js"],"names":["Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","className","NotificationError","DefaultProps","defaultProps","Cover","name","connect","Button","onClick","variant","useBalance","useContractKit","address","kit","useState","balance","setBalance","getBalance","useCallback","getTotalBalance","value","useEffect","useContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","web3","eth","Contract","useMinterContract","Minter","MinterAddress","useSealsContract","Seals","SealsAddress","truncateAddress","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","navigate","useNavigate","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","client","ipfsHttpClient","fetchNftMeta","ipfsUrl","axios","get","meta","console","log","e","uploadToIpfs","file","files","add","progress","prog","added","path","mintToken","performActions","description","ipfsImage","attributes","defaultAccount","data","JSON","stringify","image","createdBy","uri","methods","safeMint","send","from","getMyTokens","myNfts","call","res","Promise","all","map","tokenId","tokenURI","tokenUri","Number","tokens","getActiveDeals","sealsContract","minterContract","activeDeals","deal","dealId","minBid","highestBidder","highestBid","bidsCount","deals","createDeal","sealsAddress","_minBid","BigNumber","toString","approve","plaformPrice","platformPrice","closeDeal","alert","placeBid","bidAmount","_value","Factory","setName","setDescription","setIpfsImage","setAttributes","show","setShow","setLoading","handleClose","save","toast","error","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","Label","trait_type","attributeObject","arr","index","findIndex","el","oldArray","setAttributesFunc","Footer","disabled","Navigation","to","Nav","CELO","Bid","fromEthers","setBidAmount","handleBid","Group","min","autoFocus","NftCard","nft","src","alt","attri","display","justifyContent","alignItems","backgroundColor","Loader","role","Home","updateBalance","nfts","setNfts","loading","getAssets","allNfts","_nft","nftContract","List","setMinBid","handleList","Profile","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","url","element","document","getElementById"],"mappings":"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","file":"static/js/main.5efdf585.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ToastContainer} from 'react-toastify';\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: '',\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from \"prop-types\";\nimport \"./Cover.scss\";\n\nconst Cover = ({ name, connect }) => {\n  if (name) {\n    return (\n      <div className=\"d-flex justify-content-center flex-column text-center app__cover\">\n        <div className=\"mt-auto text-light mb-5\">      \n          <h1>{name}</h1>\n          <p>Please connect your wallet to continue.</p>\n          <Button\n            onClick={connect}\n            variant=\"outline-light\"\n            className=\"rounded-pill px-3 mt-3\"\n          >\n            Connect Wallet\n          </Button>\n        </div>\n\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nCover.propTypes = {\n  // props passed into this component\n  name: PropTypes.string,\n};\n\nCover.defaultProps = {\n  name: \"\",\n};\n\nexport default Cover;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import { useContract } from \"./useContract\";\nimport Minter from \"../contracts/Minter.json\";\nimport MinterAddress from \"../contracts/Minter-address.json\";\n\n// export interface for NFT contract\nexport const useMinterContract = () =>\n  useContract(Minter.abi, MinterAddress.Minter);\n","import { useContract } from \"./useContract\";\r\nimport Seals from \"../contracts/Seals.json\";\r\nimport SealsAddress from \"../contracts/Seals-address.json\";\r\n\r\n// export interface for NFT contract\r\nexport const useSealsContract = () =>\r\n  useContract(Seals.abi, SealsAddress.Seals);\r\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nconst Identicon = ({address, size, ...rest}) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest} >\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\n    </div>\n  )\n}\n\nexport default Identicon;","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router\";\nimport { formatBigNumber, truncateAddress } from \"../../utils\";\nimport Identicon from \"../ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  const navigate = useNavigate();\n  if (address) {\n    return (\n      <>\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n                navigate(\"/\");\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport BigNumber from \"bignumber.js\";\nimport axios from \"axios\";\n\n// initialize IPFS\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\n// get the metedata for an NFT from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the owner address of an NFT\nexport const fetchNftOwner = async (contract, index) => {\n  try {\n    return await contract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// function to upload a file to IPFS\nexport const uploadToIpfs = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  try {\n    const added = await client.add(file, {\n      progress: (prog) => console.log(`received: ${prog}`),\n    });\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\n// mint an NFT\nexport const mintToken = async (\n  contract,\n  performActions,\n  { name, description, ipfsImage, attributes }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      description,\n      image: ipfsImage,\n      createdBy: defaultAccount,\n      attributes,\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n      // IPFS url for uploaded metadata\n      const uri = `https://ipfs.infura.io/ipfs/${added.path}`;\n      // mint the NFT and save the IPFS url to the blockchain\n      await contract.methods.safeMint(uri).send({ from: defaultAccount });\n    } catch (error) {\n      console.log(\"Error occured while minting NFT: \", error);\n    }\n  });\n};\n\n// fetch all my tokens\nexport const getMyTokens = async (contract) => {\n  try {\n    const res = await contract.methods.myNfts().call();\n    const tokens = await Promise.all(\n      res.map(async (tokenId) => {\n        const tokenUri = await contract.methods.tokenURI(tokenId).call();\n        const meta = await fetchNftMeta(tokenUri);\n        return {\n          tokenId: Number(tokenId),\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          attributes: meta.data.attributes,\n        };\n      })\n    );    \n    return tokens;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\n// fetch all NFTs on the smart contract\nexport const getActiveDeals = async (sealsContract, minterContract) => {\n  try {\n    const data = await sealsContract.methods.activeDeals().call();\n    const deals = await Promise.all(\n      data.map(async (deal) => {\n        const tokenUri = await minterContract.methods\n          .tokenURI(deal.tokenId)\n          .call();\n        const meta = await fetchNftMeta(tokenUri);\n        return {\n          dealId: deal.id,\n          tokenId: deal.tokenId,\n          createdBy: deal.createdBy,\n          minBid: deal.minBid,\n          highestBidder: deal.highestBidder,\n          highestBid: deal.highestBid,\n          bidsCount: deal.bidsCount,\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          attributes: meta.data.attributes,\n        };\n      })\n    );\n    return deals;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const createDeal = async (\n  performActions,\n  minterContract,\n  sealsContract,\n  sealsAddress,\n  tokenId,\n  minBid\n) => {\n  await performActions(async (kit) => {\n    const { defaultAccount } = kit;\n    const _minBid = BigNumber(minBid).shiftedBy(18).toString();\n    // first approve seals contract to use \"tokenId\"\n    try {\n      await minterContract.methods\n        .approve(sealsAddress, tokenId)\n        .send({ from: defaultAccount });\n    } catch (e) {\n      console.log(e);\n    }\n    // Create a deal with the \"tokenId\"\n    try {\n      const platformPrice = await sealsContract.methods.plaformPrice().call();\n      await sealsContract.methods\n        .createDeal(tokenId, _minBid)\n        .send({ from: defaultAccount, value: platformPrice });\n    } catch (e) {\n      console.log( e);\n    }\n  });\n};\n\nexport const closeDeal = async (\n  performActions,\n  sealsContract,\n  dealId,\n  bidsCount\n) => {\n  if (bidsCount < 1) {\n    alert(\"You must have atleast one bid before closing a deal\");\n    return;\n  }\n  // close a deal\n  await performActions(async (kit) => {\n    const { defaultAccount } = kit;\n    try {\n      await sealsContract.methods\n        .closeDeal(dealId)\n        .send({ from: defaultAccount });\n    } catch (e) {\n      console.log(e);\n    }\n  });\n};\n\nexport const placeBid = async (\n  performActions,\n  sealsContract,\n  dealId,\n  highestBid,\n  minBid,\n  bidAmount\n) => {\n  await performActions(async (kit) => {\n    const _value = BigNumber(bidAmount).shiftedBy(18).toString();\n    const _minBid =\n      highestBid == 0\n        ? minBid\n        : highestBid + Number(BigNumber(1).shiftedBy(18));\n    if (bidAmount < _minBid) {\n      alert(\n        \"Bid amount too low. It must be equal to the min bid or higher than the highest bid\"\n      );\n      return;\n    }\n    const { defaultAccount } = kit; \n    try {\n      await sealsContract.methods\n        .placeBid(dealId)\n        .send({\n          from: defaultAccount,\n          value: _value,\n        });\n    } catch (e) {\n      console.log(e);\n    }\n  });\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { toast } from \"react-toastify\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs, mintToken } from \"../../utils/minter\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useMinterContract } from \"../../hooks\";\nimport {\n  NotificationSuccess,\n  NotificationError,\n} from \"../../components/ui/Notifications\";\n\nconst Factory = () => {\n  const [name, setName] = useState();\n  const [description, setDescription] = useState();\n  const [ipfsImage, setIpfsImage] = useState();\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n  const [loading, setLoading] = useState();\n  const { performActions } = useContractKit();\n  const minterContract = useMinterContract();\n\n  // confirm if all form data has been filled\n  const isFormFilled = () =>\n    name && ipfsImage && description && attributes.length === 1;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const { value } = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n\n  // mint new NFT\n  const save = async (data) => {\n    try {\n      setLoading(true);\n      // create an nft functionality\n      await mintToken(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      // navigate(\"/\");\n      // window.location.reload();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <div onClick={handleShow}>Factory</div>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Mint a digital item and foever own it!</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description of item\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Item image\"\n            ></Form.Control>\n\n            <Form.Label>\n              <h5>Attributes</h5>\n            </Form.Label>\n\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Art type\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Music, Picture, Sketch etc.\"\n                onChange={(e) => {\n                  setAttributesFunc(e, \"art_type\");\n                }}\n              />\n            </FloatingLabel>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                description,\n                ipfsImage,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Mint\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default Factory;\n","import React, {useEffect} from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Nav } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useBalance, useSealsContract } from \"../../hooks\";\nimport Wallet from \"../../components/wallet/Wallet\";\nimport \"./Navigation.scss\";\nimport Factory from \"../Factory/Factory\";\n\nconst Navigation = () => {\n  /*\n    address : fetch the connected wallet address\n    destroy: terminate connection to user wallet\n    connect : connect to the celo blockchain\n     */\n  const { address, destroy, kit } = useContractKit();\n\n  //  fetch user's celo balance using hook\n  const { balance, getBalance } = useBalance();\n  const sealsContract  = useSealsContract();\n\n  useEffect(() => {\n    if (sealsContract) getBalance();\n  }, [sealsContract]);\n\n  return (\n    <div className=\"app__nav\">\n      <div className=\"app__nav-list\">\n        <div className=\"app__title\">\n          <Link to=\"/\">Seals</Link>\n          <div className=\"app__title-subtitle\">\n            Seal a deal on the blockchain today\n          </div>\n        </div>\n        <div className=\"app__nav-item\">\n          <Link to=\"/\">Home</Link>\n        </div>\n        <div className=\"app__nav-item\">\n          <Link to=\"/profile\">Profile</Link>\n        </div>\n        <div className=\"app__nav-item mint-btn\">\n          <Factory/>\n        </div>\n      </div>\n      <Nav className=\"app__nav-more\">\n        <Nav.Item>\n          {/*display user wallet*/}\n          <Wallet\n            address={address}\n            amount={balance.CELO}\n            symbol=\"CELO\"\n            destroy={destroy}\n          />\n        </Nav.Item>\n      </Nav>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nconst Bid = ({\r\n  fromEthers,\r\n  sealsContract,\r\n  placeBid,\r\n  dealId,\r\n  highestBid,\r\n  minBid,\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n  const [bidAmount, setBidAmount] = useState();\r\n  const { performActions } = useContractKit();\r\n\r\n  const handleBid = async () => {\r\n    setShow(false);\r\n    await placeBid(\r\n      performActions,\r\n      sealsContract,\r\n      dealId,\r\n      highestBid,\r\n      minBid,\r\n      bidAmount\r\n    );\r\n  };\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card-button\" onClick={handleShow}>\r\n        Place Bid\r\n      </div>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Place a bid</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder={Number(fromEthers(highestBid == 0 ? minBid : highestBid)) + 1}\r\n                onChange={(e) => setBidAmount(e.target.value)}\r\n                min={fromEthers(highestBid == 0 ? minBid : highestBid)}\r\n                autoFocus\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={() => handleBid()}>\r\n            Bid\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Bid;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useSealsContract } from \"../../hooks\";\nimport Identicon from \"./Identicon\";\nimport Bid from \"./Bid\";\nimport \"./Card.scss\";\nimport BigNumber from \"bignumber.js\";\nimport { ERC20_DECIMALS } from \"../../utils/constants\";\n\nconst fromEthers = (num) => {\n  return BigNumber(num).shiftedBy(-ERC20_DECIMALS).toString();\n};\n\nconst NftCard = ({ nft, placeBid, closeDeal }) => {\n  const {\n    dealId,\n    tokenId,\n    createdBy,\n    minBid,\n    highestBidder,\n    highestBid,\n    bidsCount,\n    name,\n    image,\n    description,\n    attributes,\n  } = nft;\n  const { kit, performActions } = useContractKit();\n  const sealsContract = useSealsContract();\n  const { defaultAccount } = kit;\n\n  return (\n    <>\n      <div className=\"nft-card\">\n        <div className=\"card-header\">\n          <Identicon address={createdBy} size={50} />\n          <div className=\"card-highest-bid\">\n            {highestBid == 0\n              ? fromEthers(minBid)\n              : fromEthers(highestBid)} CELO\n          </div>\n          <div className=\"card-token-id\">{tokenId} ID</div>\n        </div>\n        <div className=\"card-img\">\n          <img src={image} alt={description} />\n        </div>\n        <div className=\"card-body\">\n          <div className=\"body-details\">\n            <div className=\"body-name\">{name}</div>\n            <div>{description}</div>\n            <div>\n              {attributes.map((attri) => (\n                <div className=\"card-attribute\">\n                  <div className=\"t-type\">{attri.trait_type}</div>\n                  <div>{attri.value}</div>\n                </div>\n              ))}\n            </div>\n            <div className=\"card-deal-props\">\n              <div>\n                <div className=\"card-label\">Starting Bid</div>\n                <div className=\"card-val\">{fromEthers(minBid)} CELO</div>\n              </div>\n              <div>\n                <div className=\"card-label\">Bids Count</div>\n                <div className=\"card-val\">{bidsCount}</div>\n              </div>\n            </div>\n          </div>\n          <div className=\"card-action\">\n            {createdBy == defaultAccount ? (\n              <button\n                className=\"card-button\"\n                onClick={() =>\n                  closeDeal(performActions, sealsContract, dealId, bidsCount)\n                }\n              >\n                Close Deal\n              </button>\n            ) : highestBidder == defaultAccount ? (\n              <div className=\"card-button-text\">Deal not closed yet</div>\n            ) : (\n              <Bid\n                placeBid={placeBid}\n                fromEthers={fromEthers}\n                sealsContract={sealsContract}\n                dealId={dealId}\n                highestBid={highestBid}\n                minBid={minBid}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\n\nconst style = {\n  height: \"100vh\",\n  width: \"100vw\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: \"black\"\n}\n\nconst Loader = () => (\n  <div className=\"d-flex justify-content-center\" style={style}>\n    <Spinner\n      animation=\"border\"\n      variant=\"light\"\n      role=\"status\"\n      className=\"opacity-100\"\n    >\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Nft from \"../../components/ui/Card\";\nimport Loader from \"../../components/ui/Loader\";\nimport { closeDeal, placeBid, getActiveDeals } from \"../../utils/minter\";\nimport \"./Home.scss\";\n\nconst Home = ({ updateBalance, sealsContract, minterContract }) => {\n  const { address, kit } = useContractKit();  \n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      // fetch all nfts from the smart contract\n      const allNfts = await getActiveDeals(sealsContract, minterContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [sealsContract]);\n\n  useEffect(() => {\n    try {\n      if (address && sealsContract) {\n        getAssets();\n        updateBalance();\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [sealsContract, address, getAssets]);\n \n  if (address) {\n    return (\n      <div className=\"app__market\">\n        {!loading ? (\n          <div className=\"app__market-market\">\n            <div className=\"app__market-heading\">\n              <h1 className=\"app__market-title\">Market</h1>\n            </div>\n            <div className=\"app__market-body\">\n              {/* display all NFTs */}\n              {nfts ? (\n                <div>No NFT to display at the moment</div>\n              ) : (\n                nfts.map((_nft) => (\n                  <Nft\n                    key={_nft.tokenId}\n                    nft={{\n                      ..._nft,\n                    }}\n                    placeBid={placeBid}\n                    closeDeal={closeDeal}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        ) : (\n          <Loader />\n        )}\n      </div>\n    );\n  }\n  return null;\n};\n\nHome.propTypes = {\n  // props passed into this component\n  nftContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nHome.defaultProps = {\n  nftContract: null,\n};\n\nexport default Home;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport { useMinterContract, useSealsContract } from \"../../hooks\";\r\nimport Seals from \"../../contracts/Seals-address.json\";\r\nimport React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { createDeal } from \"../../utils/minter\";\r\n\r\nconst List = ({ tokenId }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [minBid, setMinBid] = useState();\r\n  const { performActions } = useContractKit();\r\n  const minterContract = useMinterContract();\r\n  const sealsContract = useSealsContract();\r\n  const sealsAddress = Seals.Seals;\r\n\r\n  const handleList = async () => {\r\n    await createDeal(\r\n      performActions,\r\n      minterContract,\r\n      sealsContract,\r\n      sealsAddress,\r\n      tokenId,\r\n      minBid\r\n    );\r\n    setShow(false);\r\n  };\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <div className=\"card-button\">\r\n      <div className=\"card-text\" onClick={handleShow}>\r\n        List\r\n      </div>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Minimum Bid amount</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"1\"\r\n                onChange={(e) => setMinBid(e.target.value)}\r\n                autoFocus\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={() => handleList()}>\r\n            List\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Navigation from \"../Navigation/Navigation\";\nimport { useMinterContract } from \"../../hooks\";\nimport Loader from \"../../components/ui/Loader\";\nimport { getMyTokens } from \"../../utils/minter\";\nimport List from \"../../components/ui/List\";\nimport \"./Profile.scss\";\n\nconst Profile = () => {\n  const [loading, setLoading] = useState(false);\n  const [nfts, setNfts] = useState([]);\n  const minterContract = useMinterContract();\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      // fetch all nfts I own from the smart contract\n      const allNfts = await getMyTokens(minterContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  useEffect(() => {\n    try {\n      if (minterContract) {\n        getAssets();\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, getAssets]);\n\n  return (\n    <>\n      <Navigation />\n      {!loading ? (\n        <div className=\"app__profile\">\n          <div className=\"app__profile-subtitle\">\n            My NFTs\n            <hr className=\"hr__class\" />\n          </div>\n          <div className=\"my-nfts\">\n            {nfts.length === 0 ? (\n              <div className=\"no-nft-msg\">Nothing to display</div>\n            ) : (\n              nfts.map((nft) => (\n                <div className=\"nft-card\">\n                  <div className=\"card-img\">\n                    <img src={nft.image} alt={nft.description} />\n                  </div>\n                  <div className=\"card-body\">\n                    <div className=\"body-details\">\n                      <div className=\"body-name\">{nft.name}</div>\n                      <div>{nft.description}</div>\n                      <div>\n                        {nft.attributes.map((attri) => (\n                          <div className=\"card-attribute\">\n                            <div className=\"t-type\">{attri.trait_type}</div>\n                            <div>{attri.value}</div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    <div className=\"card-action\">\n                      <List tokenId={nft.tokenId}/>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Cover from \"./components/Cover\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { Nav, Home } from \"./container\";\nimport { useBalance, useMinterContract, useSealsContract } from \"./hooks\";\nimport \"./index.css\";\nimport \"./App.scss\";\n\nconst App = function AppWrapper() {  \n  /*\n    address : fetch the connected wallet address\n    destroy: terminate connection to user wallet\n    connect : connect to the celo blockchain\n     */\n  const { address, connect } = useContractKit();\n\n  // get celo balance of address\n  const { getBalance } = useBalance();\n\n  // initialize the NFT and platform contract\n  const minterContract = useMinterContract();\n  const sealsContract = useSealsContract();\n\n  return (\n    <div className=\"app__base\">\n      <Notification />\n      {address ? (\n        <>\n          <Nav />\n          <Home\n            updateBalance={getBalance}\n            sealsContract={sealsContract}\n            minterContract={minterContract}\n          />\n        </>\n      ) : (\n        <Cover name=\"Seals\" connect={connect} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport { Profile, Factory } from \"./container\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Seals\",\n        description: \"Seal a deal on the blockchain today\",\n        url: \"https://example.com\",\n      }}\n    >\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n          <Route path=\"/profile\" element={<Profile />} />\n        </Routes>\n      </Router>\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}